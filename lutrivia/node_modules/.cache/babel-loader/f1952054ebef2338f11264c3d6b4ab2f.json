{"ast":null,"code":"var _jsxFileName = \"/Users/arieldavis/Development/code/lutrivia-react-atlanta-web-021720/lutrivia/src/components/TriviaContainer.js\";\nimport React from 'react';\nimport data from '../data';\nimport Trivia from './Trivia';\n\nclass TriviaContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0\n    };\n\n    this.handleBtnClick = () => {\n      this.setState(prevState => ({\n        score: prevState.score + 1\n      }));\n    };\n\n    this.renderQuestions = () => {\n      let randomArr = this.getRandom(this.state.triviaQuestions, 4);\n      return randomArr.map(question => React.createElement(Trivia, {\n        key: question.text,\n        questions: question,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n    };\n  }\n\n  getRandom(arr, n) {\n    let result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len) throw new RangeError(\"getRandom: more elements taken than available\");\n\n    while (n--) {\n      let x = Math.floor(Math.random() * len);\n      result[n] = arr[x in taken ? taken[x] : x];\n      taken[x] = --len in taken ? taken[len] : len;\n    }\n\n    return result;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Score: \", this.state.score), this.renderQuestions());\n  }\n\n}\n\nexport default TriviaContainer;","map":{"version":3,"sources":["/Users/arieldavis/Development/code/lutrivia-react-atlanta-web-021720/lutrivia/src/components/TriviaContainer.js"],"names":["React","data","Trivia","TriviaContainer","Component","state","score","handleBtnClick","setState","prevState","renderQuestions","randomArr","getRandom","triviaQuestions","map","question","text","arr","n","result","Array","len","length","taken","RangeError","x","Math","floor","random","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA8C;AAAA;AAAA;AAAA,SAC1CC,KAD0C,GAClC;AACJC,MAAAA,KAAK,EAAE;AADH,KADkC;;AAAA,SAmB1CC,cAnB0C,GAmBzB,MAAM;AACnB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAExBH,QAAAA,KAAK,EAAEG,SAAS,CAACH,KAAV,GAAkB;AAFD,OAAL,CAAvB;AAIH,KAxByC;;AAAA,SA0B1CI,eA1B0C,GA0BxB,MAAM;AACpB,UAAIC,SAAS,GAAG,KAAKC,SAAL,CAAe,KAAKP,KAAL,CAAWQ,eAA1B,EAA2C,CAA3C,CAAhB;AACA,aAAOF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IACzB,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,QAAQ,CAACC,IAAtB;AAA4B,QAAA,SAAS,EAAED,QAAvC;AAAiD,QAAA,cAAc,EAAE,KAAKR,cAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAGH,KA/ByC;AAAA;;AAK1CK,EAAAA,SAAS,CAACK,GAAD,EAAMC,CAAN,EAAS;AACd,QAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUF,CAAV,CAAb;AAAA,QACIG,GAAG,GAAGJ,GAAG,CAACK,MADd;AAAA,QAEIC,KAAK,GAAG,IAAIH,KAAJ,CAAUC,GAAV,CAFZ;AAGA,QAAIH,CAAC,GAAGG,GAAR,EACI,MAAM,IAAIG,UAAJ,CAAe,+CAAf,CAAN;;AACJ,WAAON,CAAC,EAAR,EAAY;AACR,UAAIO,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,GAA3B,CAAR;AACAF,MAAAA,MAAM,CAACD,CAAD,CAAN,GAAYD,GAAG,CAACQ,CAAC,IAAIF,KAAL,GAAaA,KAAK,CAACE,CAAD,CAAlB,GAAwBA,CAAzB,CAAf;AACAF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,EAAEJ,GAAF,IAASE,KAAT,GAAiBA,KAAK,CAACF,GAAD,CAAtB,GAA8BA,GAAzC;AACH;;AACD,WAAOF,MAAP;AACH;;AAeDU,EAAAA,MAAM,GAAG;AACL,WACI,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAY,KAAKxB,KAAL,CAAWC,KAAvB,CAFI,EAGC,KAAKI,eAAL,EAHD,CADJ;AAOH;;AAxCyC;;AA2C9C,eAAeP,eAAf","sourcesContent":["import React from 'react';\nimport data from '../data';\nimport Trivia from './Trivia';\n\nclass TriviaContainer extends React.Component {\n    state = {  \n        score: 0\n    }\n\n    getRandom(arr, n) {\n        let result = new Array(n),\n            len = arr.length,\n            taken = new Array(len);\n        if (n > len)\n            throw new RangeError(\"getRandom: more elements taken than available\");\n        while (n--) {\n            let x = Math.floor(Math.random() * len);\n            result[n] = arr[x in taken ? taken[x] : x];\n            taken[x] = --len in taken ? taken[len] : len;\n        }\n        return result;\n    }\n\n    handleBtnClick = () => {\n        this.setState(prevState => ({\n\n            score: prevState.score + 1\n        }))\n    }\n\n    renderQuestions = () => {\n        let randomArr = this.getRandom(this.state.triviaQuestions, 4)\n        return randomArr.map(question => \n            <Trivia key={question.text} questions={question} handleBtnClick={this.handleBtnClick}/>\n        )\n    }\n    render() { \n        return (  \n            <>\n            <h1>Lutrivia</h1>\n        <h2>Score: {this.state.score}</h2>\n            {this.renderQuestions()}\n            </>\n        );\n    }\n}\n\nexport default TriviaContainer;"]},"metadata":{},"sourceType":"module"}