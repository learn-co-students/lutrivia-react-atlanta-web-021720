{"ast":null,"code":"var _jsxFileName = \"/Users/lauraarchambault/Development/code/lutrivia-react-atlanta-web-021720/lutrivia/src/QuizContainer.js\";\nimport React, { Fragment } from 'react';\nimport HeadBar from './HeadBar';\nimport QuestionCard from './QuestionCard';\nimport ScoreForm from './ScoreForm';\n\nclass QuizContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      wasClicked: []\n    };\n\n    this.addScore = () => {\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n\n    this.renderAnswer = e => {\n      if (this.state.wasClicked) {\n        return;\n      }\n\n      this.setState({\n        wasClicked: true\n      });\n\n      if (e.target.innerText.toLowerCase() === this.props.question.answer.toString()) {\n        e.target.style.background = '#b4e854';\n        this.props.addScore();\n      } else {\n        e.target.style.background = '#e34f4f';\n      }\n    };\n\n    this.resetScore = () => {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HeadBar, {\n      score: this.state.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }), this.props.questions.map((question, ind) => /*#__PURE__*/React.createElement(QuestionCard, {\n      key: ind,\n      question: question,\n      addScore: this.addScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ScoreForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default QuizContainer;","map":{"version":3,"sources":["/Users/lauraarchambault/Development/code/lutrivia-react-atlanta-web-021720/lutrivia/src/QuizContainer.js"],"names":["React","Fragment","HeadBar","QuestionCard","ScoreForm","QuizContainer","Component","state","score","wasClicked","addScore","setState","renderAnswer","e","target","innerText","toLowerCase","props","question","answer","toString","style","background","resetScore","render","questions","map","ind"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA2C;AAAA;AAAA;AAAA,SAEvCC,KAFuC,GAEjC;AACFC,MAAAA,KAAK,EAAE,CADL;AAEFC,MAAAA,UAAU,EAAE;AAFV,KAFiC;;AAAA,SAOvCC,QAPuC,GAO5B,MAAM;AACb,WAAKC,QAAL,CAAc;AAACH,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA3B,OAAd;AACH,KATsC;;AAAA,SAWvCI,YAXuC,GAWxBC,CAAC,IAAI;AAChB,UAAI,KAAKN,KAAL,CAAWE,UAAf,EAA2B;AACvB;AACH;;AACD,WAAKE,QAAL,CAAc;AAACF,QAAAA,UAAU,EAAE;AAAb,OAAd;;AACA,UAAII,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,WAAnB,OAAqC,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,QAA3B,EAAzC,EAAgF;AAC5EP,QAAAA,CAAC,CAACC,MAAF,CAASO,KAAT,CAAeC,UAAf,GAA4B,SAA5B;AACA,aAAKL,KAAL,CAAWP,QAAX;AACH,OAHD,MAGO;AACHG,QAAAA,CAAC,CAACC,MAAF,CAASO,KAAT,CAAeC,UAAf,GAA4B,SAA5B;AACH;AACJ,KAtBsC;;AAAA,SAwBvCC,UAxBuC,GAwB1B,MAAM,CAAE,CAxBkB;AAAA;;AA0BvCC,EAAAA,MAAM,GAAG;AACT,wBACI,uDACI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKS,KAAL,CAAWQ,SAAX,CAAqBC,GAArB,CAA0B,CAACR,QAAD,EAAWS,GAAX,kBAC3B,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,GAAnB;AACI,MAAA,QAAQ,EAAET,QADd;AAEI,MAAA,QAAQ,EAAE,KAAKR,QAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,CAFL,eAMI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AASE;;AApCqC;;AAuC3C,eAAeL,aAAf","sourcesContent":["import React, {Fragment} from 'react';\nimport HeadBar from './HeadBar'\nimport QuestionCard from './QuestionCard'\nimport ScoreForm from './ScoreForm'\n\nclass QuizContainer extends React.Component{\n\n    state={\n        score: 0,\n        wasClicked: []\n    }\n\n    addScore = () => {\n        this.setState({score: this.state.score + 1})\n    }\n\n    renderAnswer = e => {\n        if (this.state.wasClicked) {\n            return\n        }\n        this.setState({wasClicked: true})\n        if (e.target.innerText.toLowerCase() === this.props.question.answer.toString()) {\n            e.target.style.background = '#b4e854'\n            this.props.addScore()\n        } else {\n            e.target.style.background = '#e34f4f'\n        }\n    }\n\n    resetScore = () => {}\n\n    render() {\n    return(\n        <>\n            <HeadBar score={this.state.score}/>\n            {this.props.questions.map( (question, ind) => \n            <QuestionCard key={ind} \n                question={question} \n                addScore={this.addScore}/>)}\n            <ScoreForm />\n        </>\n    )}\n}\n\nexport default QuizContainer"]},"metadata":{},"sourceType":"module"}